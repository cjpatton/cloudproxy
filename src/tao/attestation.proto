//  File: attestation.proto
//  Author: Tom Roeder <tmroeder@google.com>
//
//  Description: Protocol buffers for Tao Attestation
//
//  Copyright (c) 2013, Google Inc.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tao;

message Statement {
  // the time at which the attestation was made, in 64-bit POSIX time
  required int64 time = 1;

  // the time at which this statement's validity expires
  required int64 expiration = 2;

  // the data to attest to
  required bytes data = 3;

  // the name of the algorithm used to hash the program
  optional string hash_alg = 4;

  // the hash of the program
  optional string hash = 5;
}

enum AttestationType {
  UNKNOWN = 0; ROOT = 1; INTERMEDIATE = 2; TPM_1_2_QUOTE = 3;
} message Attestation {
  required AttestationType type = 1;

  // A serialized Statement message. This can be empty, e.g., when
  // this attestation is in the cert field, hence the serialized
  // public_key is the serialized_statement.
  required bytes serialized_statement = 2;

  // A signature on the serialized statement; this signature is made using
  // tao::SignData with a context "tao::Attestation Statement version 1".
  required bytes signature = 3;

  // A TPM 1.2 Quote, if needed
  optional bytes quote = 4;

  // A serialized Attestation attesting to the key used to create the signature
  // and signed by the next Tao level down. If this is empty, then
  // the key must be the policy key.
  optional bytes cert = 5;
}

message X509Details {
  // Requested x509 CommonName detail
  optional bytes commonname = 3;

  // Requested x509 Country detail
  optional bytes country = 4;

  // Requested x509 State detail
  optional bytes state = 5;

  // Requested x509 Organization detail
  optional bytes organization = 6;
}

enum TaoCARequestType {
  TAO_CA_REQUEST_UNKNOWN = 0;
  TAO_CA_REQUEST_ATTESTATION = 1;  // request Attestation and/or x509 chain
}

message TaoCARequest {
  required TaoCARequestType type = 1;

  // An attestation containing a public key. Used when type is
  // TAO_CA_REQUEST_ATTESTATION. A new ROOT attestation will be returned for the
  // same public key, but signed by the policy key.
  optional Attestation attestation = 2;

  // Details for an x509 certificate chain. Optionally used when type is
  // TAO_CA_REQUEST_ATTESTATION. When included in such requests, a new x509
  // certificate chain will be returned for the same public key and the same
  // certificate details, rooted at the policy key.
  optional X509Details x509details = 3;
}

enum TaoCAResponseType {
  TAO_CA_RESPONSE_UNKNOWN = 0;
  TAO_CA_RESPONSE_SUCCESS = 1;
  TAO_CA_RESPONSE_FAILURE = 2;
}

message TaoCAResponse {
  required TaoCAResponseType type = 1;

  // A root attestation for requests of type TAO_CA_REQUEST_CONDENSED_ATTESTATION
  optional Attestation attestation = 2;

  // A PEM-encoded x509 certificate chain
  optional bytes x509chain = 3;

  // An error from the operation
  optional string reason = 4;
}
