#* 
#* author: Tom Roeder
#* email: tmroeder@google.com
#* date: 2014-09-24T17:26:40-0700
#* 
#- Switch to genaik from tpm_tao.
#- 
#- This commit removes the last dependency of the Go CloudProxy Tao on the C++
#- CloudProxy Tao: it uses the latest version of github.com/google/go-tpm/tpm to
#- generate an AIK instead of relying on TrouSerS to do this.
#- 
#- 
#- Explain integration-test install process.
#- 
#- This commit adds a file that explains how to install the simple integration
#- tests set up by install.sh, including how to get the TPM set up and some tips
#- and tricks for working with the Datalog version of the tests.
#- 
#- 
diff --git a/INSTALL.md b/INSTALL.md
new file mode 100644
index 0000000..30c14e7
--- /dev/null
+++ b/INSTALL.md
@@ -0,0 +1,82 @@
+Installing CloudProxy Integration Tests
+=======================================
+
+CloudProxy provides an install script to set up simple integration tests for
+multiple variants of the CloudProxy system. To install the simplest tests in a
+directory `test`, run
+
+    ./install.sh -notpm test
+
+This will output something like
+
+    Installing tao test scripts into: /home/tmroeder/src/github.com/jlmucb/cloudproxy/test
+    Done installing.
+      /home/tmroeder/src/github.com/jlmucb/cloudproxy/test/bin               # Link to /usr/local/google/home/tmroeder/bin.
+      /home/tmroeder/src/github.com/jlmucb/cloudproxy/test/logs              # Log files.
+      /home/tmroeder/src/github.com/jlmucb/cloudproxy/test/scripts           # Useful scripts.
+      /home/tmroeder/src/github.com/jlmucb/cloudproxy/test/tao.env           # Environment variables.
+    Typical next steps:
+      cd /home/tmroeder/src/github.com/jlmucb/cloudproxy/test/
+      ./scripts/setup.sh           # Create keys, hashes, ACLs, etc.
+      ./scripts/start.sh           # Run Tao CA and Linux Tao server.
+      ./scripts/host.sh ./bin/demo # Run a demo application.
+      ./scripts/stop.sh            # Kill all Tao programs.
+      ./scripts/refresh.sh         # Refresh hashes, ACLs, etc.
+    Run /home/tmroeder/src/github.com/jlmucb/cloudproxy/test/scripts/help.sh for more info.
+
+Follow these instructions; run setup.sh, then start.sh, then host.sh on the
+demo app. For this last step to work, the `$GOPATH` variable must be set up
+correctly, and the cloudproxy binaries must be installed in `$GOPATH/bin`. To
+install these binaries, run
+
+    go install github.com/jlmucb/cloudproxy/...
+
+To get the TPM version to work, you must have already taken ownership of the
+TPM. There is an
+[application](https://github.com/google/go-tpm/tree/master/examples/tpm-takeownership)
+in go-tpm that can take ownership. Note that the
+`TPM_TakeOwnership` operation only works if there is no TPM Owner and TPM
+presence has been asserted. The way to assert physical presence varies between
+platforms.
+
+Additionally, to use the TPM, you must have built and installed
+[genaik](https://github.com/google/go-tpm/tree/master/examples/genaik) from
+and installed it in `$GOPATH/bin`. You
+can do this with the command
+
+    go install github.com/google/go-tpm/...
+
+Running the Datalog CloudProxy Integration Tests
+================================================
+
+The `install.sh` script contains a simple authorization policy that can be
+translated to Datalog and used as a guard. To set up a version of the
+integration tests with TPM support and Datalog authorization, run
+
+    ./install.sh -tpm -datalog test
+
+Note that the datalog policy is very specific about the path of programs that
+can be hosted, since the arguments to a program (including the path to the
+program in `argv[0]`) become part of the name of the program, and this name is
+used to check hosted-program authorization in Datalog. The default policy in
+`install.sh` only authorizes the full path to the program. So, for example, if
+the test directory is located in `/home/tmroeder/test`, then the command
+
+    ./scripts/host.sh ./bin/demo
+
+will fail with authorization errors (since `argv[0]` will be `./bin/demo`, and
+that will not be authorized), but the command
+
+    ./scripts/host.sh /home/tmroeder/test/bin/demo
+
+will work.
+
+The default policy in `install.sh` also authorizes communication with tcca, the
+Tao CA. To execute a version of the TPM/Datalog demo with tcca, run the
+following commands in the test directory after setting it up with `./install.sh
+-tpm -datalog`
+
+    ./scripts/setup.sh
+    ./scripts/start.sh
+    ./bin/tcca &
+    ./scripts/host.sh /home/tmroeder/test/bin/demo -ca=localhost:8124
diff --git a/install.sh b/install.sh
index bd515be..c432038 100755
--- a/install.sh
+++ b/install.sh
@@ -1,41 +1,42 @@
 #!/bin/bash
 # Copyright (c) 2014, Kevin Walsh. All rights reserved.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
 # Multi-purpose script for setting up and running tao and cloudproxy tests.
 #
 # This script works with the Go implementation of Tao. It assumes all binaries
 # have been installed in ${GOPATH}/bin (e.g. via `go install`)
 #
-# If you wish to use the TPM, you must have taken ownership of the TPM.
+# If you wish to use the TPM, you must have taken ownership of the TPM. For
+# example, see github.com/google/go-tpm/examples/tpm-takeownership.
 
 set -e # quit script on first error
 
 # INSTALL BEGIN
 # Note: This section of code is removed by install.sh
 script_path="install.sh"
 test_dir=""
 test_tpm="no"
 verbose="yes"
 test_guard="AllowAll"
 for arg in "$@"; do
 	case "$arg" in
 		-notpm)
 			test_tpm="no"
 			shift
 			;;
 		-tpm)
 			test_tpm="yes"
 			shift
 			;;
@@ -122,44 +123,40 @@ fi
 
 cat <<END > "$test_dir/tao.env"
 # Tao/CloudProxy environment variables"
 export TAO_TEST="$test_dir" # Also hardcoded into $test_dir/scripts/*.sh
 export TAO_ROOTDIR="$root_dir"
 export TAO_USE_TPM="$test_tpm"
 
 # Flags for tao programs
 export TAO_config_path="${test_dir}/tao.config"
 export TAO_guard="$test_guard"
 
 # Flags for tao_admin
 export TAO_ADMIN_pass="BogusPass"
 
 # Flags for linux_host
 export TAO_HOST_pass="BogusPass"
 export TAO_HOST_root="$test_root"
 export TAO_HOST_stacked="$test_stacked"
 export TAO_HOST_path="${test_dir}/linux_tao_host"
 
-# Flags for tpm_tao
-export TAO_TPM_path="${test_dir}/tpm"
-export TAO_TPM_pcrs="17,18"
-
 # Flags for glog
 export GLOG_v=2
 export GLOG_logtostderr="no"
 export GLOG_alsologtostderr="no"
 export GLOG_stderrthreshold=3 # Only log FATAL to stderr.
 export GLOG_log_dir="\${TAO_TEST}/logs"
 
 # Misc.
 export TAO_HOSTED_PROGRAMS="
 \${TAO_TEST}/bin/demo 
 \${TAO_TEST}/bin/demo_server
 \${TAO_TEST}/bin/client 
 \${TAO_TEST}/bin/server 
 \${TAO_TEST}/bin/fclient 
 \${TAO_TEST}/bin/fserver 
 \${TAO_TEST}/bin/http_echo_server 
 \${TAO_TEST}/bin/https_echo_server 
 "
 
 # BEGIN SETUP VARIABLES
@@ -268,47 +265,52 @@ function setup()
 
 	echo "Creating TaoDomain keys and settings."
 	tao_admin -create -name testing
 
 	# This sets:
 	# $GOOGLE_HOST_TAO # name of underlying host tao, i.e. the TPM (if any)
 	# GOOGLE_TAO_TPM, GOOGLE_TAO_PCRS, # more details about TPM (if any)
 	# and GOOGLE_TAO_LINUX # name of the LinuxHost
 	sed -i '/^# BEGIN SETUP VARIABLES/,/^# END SETUP VARIABLES/d' ${tao_env} 
 	echo "# BEGIN SETUP VARIABLES" >> ${tao_env}
 	echo "# These variables come from ${TAO_TEST}/scripts/setup.sh" >> ${tao_env}
 
 	if [ "$TAO_USE_TPM" == "yes" ]; then
         # Don't create a new AIK if one is already present.
         echo "Checking ${TAO_TEST}/tpm/aikblob"
         pcr17=`tao_admin -getpcr 17`
         pcr18=`tao_admin -getpcr 18`
         if [ ! -f ${TAO_TEST}/tpm/aikblob ]; then
             echo "Creating TPMTao AIK and settings."
             rm -rf ${TAO_TEST}/tpm
-            tpm_tao --create --show=false
+            # The genaik program comes from
+            # github.com/google/go-tpm/examples/genaik and must be in
+            # $GOPATH/bin.
+            mkdir -p ${TAO_TEST}/tpm
+            genaik --blob ${TAO_TEST}/tpm/aikblob
         else
             echo "Reusing existing TPMTao AIK."
-            export GOOGLE_HOST_TAO='tao::TPMTao("dir:tpm")'
-            export GOOGLE_TAO_PCRS='PCRs("17,18", "'${pcr17}','${pcr18}'")'
         fi
 
+        export GOOGLE_HOST_TAO='tao::TPMTao("dir:tpm")'
+        export GOOGLE_TAO_PCRS='PCRs("17,18", "'${pcr17}','${pcr18}'")'
+
         tprin=`tao_admin -aikblob ${TAO_TEST}/tpm/aikblob`
         export GOOGLE_TAO_TPM=$tprin
 
         # TODO(tmroeder): do this correctly in the Go version once we support
         # AIK creation.
         echo "export GOOGLE_HOST_TAO='tao::TPMTao(\"dir:tpm\")'" >> ${tao_env}
         echo "export GOOGLE_TAO_PCRS='PCRs(\"17,18\", \"${pcr17},${pcr18}\")'" >> ${tao_env}
         echo "export GOOGLE_TAO_TPM='$tprin'" >> ${tao_env}
 	fi
 
 	echo "Creating LinuxHost keys and settings."
 	rm -rf ${TAOHOST_path}
 	linux_host --create --show=false
 	linux_host --show >> ${tao_env}
 
 	echo "# END SETUP VARIABLES" >> ${tao_env}
 
     echo "Refreshing"
 	refresh
 }
