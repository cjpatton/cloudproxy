BidProxy

To build, in ROOT (jlmcrypt),
    mkdir bidServerobjects
    mkdir bidClientobjects
    mkdir sellerClientobjects
    mkdir bidClient
    mkdir sellerClient
    mkdir bidServer

In Code/bidProxy
    make -f bidClient.mak
    make -f bidServer.mak
    make -f sellerClient.mak

Make up an activity policy key pair and embed the public key certificate in bidClient, 
sellerClient and bidServer as with fileClient and fileServer.

Two scripts facilitate the execution of XML tests as for fileProxy. These two
scripts can be found at CODE/scripts/provisionAuction.sh and
CODE/scripts/runAuction.sh. The latter test assumes that there is a single XML
test directory under bidClient/tests, and it clears out all bids from
sellerClient/bids and bidServer/bids before running the test and checking the
results. It also assumes that the auction id is 1.

The scripts are currently not quite correct, the files need some editing after generation

Public Keys generated by the script look like:

<EvidenceCollection count="1">
<EvidenceList count="1">
<ds:Signature xmlns="http://www.w3.org/2000/09/xmldsig#" Id="newKey">
  <ds:SignedInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:CanonicalizationMethod Algorithm="http://www.manferdelli.com/2011/Xml/canonicalization/tinyxmlcanonical#" />
    <ds:SignatureMethod Algorithm="http://www.manferdelli.com/2011/Xml/algorithms/rsa2048-sha256-pkcspad#" />
    <Certificate Id="//www.manferdelli.com/2011/Cert/User/1" version="1">
        <SerialNumber>1</SerialNumber>
        <PrincipalType>User</PrincipalType>
        <IssuerName>manferdelli.com</IssuerName>
        <IssuerID>manferdelli.com</IssuerID>
        <ValidityPeriod>
            <NotBefore>2011-01-01Z00:00.00</NotBefore>
            <NotAfter>2021-01-01Z00:00.00</NotAfter>
        </ValidityPeriod>
        <SubjectName>//www.manferdelli.com/User/1</SubjectName>
        <SubjectKey>
            <ds:KeyInfo KeyName="//www.manferdelli.com/Keys/1">
                <KeyType>RSAKeyType</KeyType>
                <ds:KeyValue>
                    <ds:RSAKeyValue size="1024">
                        <ds:M>XRJ1uX7vxyX/E8ldGLwgXIfhQFPqsFKu0nZL9W/ozNmfL8sYKNu6E9mk5plauKU+n19geu6LeUCT9erHy5z10LE7+MF7Q6UgzlqLfat4EsgcXqFtnJB1J8KCRD+yfj8d7qXFexqp6uDTzJQYC8BNGU6bcbpf2X87RYk9c8klkVE=</ds:M>
                        <ds:E>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAE=</ds:E>
                    </ds:RSAKeyValue>
                </ds:KeyValue>
            </ds:KeyInfo>
        </SubjectKey>
        <SubjectKeyID>//www.manferdelli.com/Keys/1</SubjectKeyID>
        <RevocationPolicy>Local-check-only</RevocationPolicy>
    </Certificate>
</ds:SignedInfo>

    <ds:SignatureValue> bp4o495zO4UD5LSxtxnrTl8hK8r8s/Vj1ThKmEipM4uL8PU8/ybcbM8yHH86h7rHvdqhPZmKAfcQdfvnPDjcXmSLfKaIzmH+gtuqg17j0/xhHxIHoIC8l8bPMAspyhPatCAB1m4iusmT3XycsGLALgRALe4WW5/gs03UIV1iFeiuhAgUwAi7FUmZRjSWSkCSKuELygjtud3nVBey4ELZ2MIJyo7ys0bZXErzbEQqfBC1fXfWSj9076CcY0IOzDLf71ZsBackDdQWFntnQ/82cEy5dQpW83K7v7bHrm9VLiHf569/wbNuTFzwMr0yGsYyqr99blDUaYw1RfVcutW/Kg== </ds:SignatureValue>
  <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#" KeyName='NO NAME'>
    <KeyType>RSAKeyType</KeyType>
   <ds:KeyValue>
        <ds:RSAKeyValue size='2048'>
            <ds:M>pCZtfApDmtrvb2TmxDYpZCAM8V3TY/9pm7sl3zXTKWkV0RN8pNuDfz/0sMKh7z9NyiMb349YzECjIbMQxFpw5/yJTJhMx3LP0HK0CYHgL3BhCvmoiCHy5Ss8G4EKnk2EAH5O3lAWUClyN6gU/Ry9vSk3IsvsMPnfCR/XEiXewQP1fI8sxGp0xOYBXGUkwexNR/zWVGER6nfWmW4nyU4Ebtn24cAWhixR19PetILPnvdy1fndYsw0egvgHH/d1NAumZXihA3nK4ftSjIrJl3xqtNd1DBCQfaLndOb8ALiHAjD8fvPMypZg5sMaxxcI6vLrVFoGOjSjwZIihfL8kFc2Q==</ds:M>
            <ds:E>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAE=</ds:E>
        </ds:RSAKeyValue>
    </ds:KeyValue>
</ds:KeyInfo>
</ds:Signature>

</EvidenceList>
</EvidenceCollection>

You should remove the EvidenceList,  and EvidenceCollection tags.

After making the corrections to the script generated files, run bidServer and bidClient after
initializing the environment as in Code/SupportFiles/suInitfp.sh.  The script to run
these are in Code/SupportFiles/runbp.sh.  The bids collected are stored (encrypted) in 
RUN/bidServer/bidssofar.enc.

Copy the cert for the server into the sellerClient directory 
	cp bidServer/cert sellerClient/serverCert
Create a file, getBids, with the auctionID.  Run serverClient while bidServer is runing (see
Code/SupportFiles/runbp.sh).  This collects the bids from bidserver.  They are stored in
sellerClient/savedBids in encrypted form.

Move getBids to resolve 
	mv sellerClient/getBids sellerClient/resolve
This signals that we want to resolve the auction.  Run sellerClient again and it will determine
the winner, sign the winning bid and puts in sellerClient/winningbid.xml.


