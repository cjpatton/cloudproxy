diff --git a/keyman.go b/keyman.go
index 2ce5535..406c435 100644
--- a/keyman.go
+++ b/keyman.go
@@ -36,6 +36,10 @@ func (m *keyManager) Create(name string, purpose keyPurpose, ktype keyType) erro
 
 	m.kz = &keyCzar{keyMeta{name, ktype, purpose, false, nil}, nil, nil, -1}
 
+	m.kz.keys = make(map[int]keydata)
+	m.kz.idkeys = make(map[uint32][]keydata)
+	m.kz.keymeta.Versions = make([]keyVersion, 0)
+
 	// check purpose vs ktype
 	// complain if location/meta exists
 	// write serialized km to location/meta
diff --git a/readers.go b/readers.go
index b7f7531..e3b2ed1 100644
--- a/readers.go
+++ b/readers.go
@@ -14,6 +14,7 @@ import (
 	"io/ioutil"
 	"os"
 	"strconv"
+
 	"code.google.com/p/go.crypto/pbkdf2"
 )
 
@@ -482,3 +483,28 @@ func (r *importedDSAPrivateKeyReader) GetKey(version int) (string, error) {
 	b, err := json.Marshal(r.dsajson)
 	return string(b), err
 }
+
+func NewJSONKeyReader(JSON []string) KeyReader {
+	return &JSONKeyReader{JSON[0], JSON[1:]}
+}
+
+type JSONKeyReader struct {
+	metaJSON string
+	keysJSON []string
+}
+
+func (j *JSONKeyReader) GetMetadata() (string, error) {
+	return j.metaJSON, nil
+}
+
+func (j *JSONKeyReader) GetKey(version int) (string, error) {
+	if version <= 0 {
+		return "", ErrNoSuchKeyVersion
+	}
+
+	if version > len(j.keysJSON) {
+		return "", ErrNoSuchKeyVersion
+	}
+
+	return j.keysJSON[version-1], nil
+}
