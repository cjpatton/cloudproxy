// Code generated by protoc-gen-go.
// source: keys.proto
// DO NOT EDIT!

package tao

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type KeyczarPublicKey struct {
	Metadata         *string                     `protobuf:"bytes,1,req,name=metadata" json:"metadata,omitempty"`
	Files            []*KeyczarPublicKey_KeyFile `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *KeyczarPublicKey) Reset()         { *m = KeyczarPublicKey{} }
func (m *KeyczarPublicKey) String() string { return proto.CompactTextString(m) }
func (*KeyczarPublicKey) ProtoMessage()    {}

func (m *KeyczarPublicKey) GetMetadata() string {
	if m != nil && m.Metadata != nil {
		return *m.Metadata
	}
	return ""
}

func (m *KeyczarPublicKey) GetFiles() []*KeyczarPublicKey_KeyFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type KeyczarPublicKey_KeyFile struct {
	Name             *int32  `protobuf:"varint,1,req,name=name" json:"name,omitempty"`
	Data             *string `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyczarPublicKey_KeyFile) Reset()         { *m = KeyczarPublicKey_KeyFile{} }
func (m *KeyczarPublicKey_KeyFile) String() string { return proto.CompactTextString(m) }
func (*KeyczarPublicKey_KeyFile) ProtoMessage()    {}

func (m *KeyczarPublicKey_KeyFile) GetName() int32 {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return 0
}

func (m *KeyczarPublicKey_KeyFile) GetData() string {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return ""
}

type X509Details struct {
	// Requested x509 CommonName detail
	Commonname []byte `protobuf:"bytes,3,opt,name=commonname" json:"commonname,omitempty"`
	// Requested x509 Country detail
	Country []byte `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	// Requested x509 State detail
	State []byte `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	// Requested x509 Organization detail
	Organization     []byte `protobuf:"bytes,6,opt,name=organization" json:"organization,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *X509Details) Reset()         { *m = X509Details{} }
func (m *X509Details) String() string { return proto.CompactTextString(m) }
func (*X509Details) ProtoMessage()    {}

func (m *X509Details) GetCommonname() []byte {
	if m != nil {
		return m.Commonname
	}
	return nil
}

func (m *X509Details) GetCountry() []byte {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *X509Details) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *X509Details) GetOrganization() []byte {
	if m != nil {
		return m.Organization
	}
	return nil
}

// A signed serialized protobuf message, including a require context to ensure
// unique deserialization.
type SignedData struct {
	// SECURITY WARNING: Always choose a unique context for each unique type of
	// message. One easy way to do this is to number the messages in a protocol
	// and make the context "ProtocolName Message Y: ProtobufName Version X"
	Context *string `protobuf:"bytes,1,req,name=context" json:"context,omitempty"`
	// The serialized protobuf representing this message.
	Data             []byte `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SignedData) Reset()         { *m = SignedData{} }
func (m *SignedData) String() string { return proto.CompactTextString(m) }
func (*SignedData) ProtoMessage()    {}

func (m *SignedData) GetContext() string {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return ""
}

func (m *SignedData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
}
